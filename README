- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Title:			Project 3: Finite State Machines
Author : 		Christian Reyes 
Description:    README for project
Course:         05-433D SSUI Web Lab
Created : 		15 Oct 2011
Modified : 		26 Oct 2011
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

statemachine.js is an implementation of a finite state machine.

A StateMachine is attached to a DOM element with two pieces of information:
	1. The description of the state machine
	2. The element which the StateMachine will be attached to.
	
The description of the state machine is expressed in JSON. Here is an example of the description for a StateMachine which will model a drag-and-drop interaction.

var drag_and_drop = {
	states: [
	{
		name: "start",
		transitions: [
			{
				input: "mouseDown", 
				action: record_down_location,
				endState: "down"
			}]
	},
	{
		name: "down",
		transitions: [
			{
				input: "mouseUp",
				action: do_drop,
				endState: "start"
			},
			{
				input: "mouseMove",
				action: move_icon,
				endState: "down"
			},
			{
				input: "mouseOut",
				action: move_out,
				endState: "start"
			}
		]
	}
	]
};

The StateMachine is created by simply calling:

var sm = new StateMachine(drag_and_drop, myElement);

The StateMachine can also supports probabilistic transitions.

For instance, if the user clicks the mouse, 50% of the time action A will be executed and the other 50% of the time action B will be executed.

===============================================================
					Test File Descriptions
===============================================================

desktop.html

Integration of multiple state machines at the same time. Modeling different 
interactions all at the same time. The code is REALLY messy. Sorry about that.
I had to focus on the core and the tests and had to merge it all for the desktop.

Double click on "Project 3". Try to rename it also
Double click "Draw!". Click inside it to draw
There is a simulated CPU usage monitor to the left
Drag the icons and folder

Most of the statemachinetest files were made to test out an interaction method without
risking having interacting bugs. They are stand-alone instances of the interactions.
 
statemachinetest-1.html

Two boxes are able to be dragged on the screen. There are two state
machines on the same page. They work without issue.

statemachinetest-2.html

Implementation of simple rubber-band line drawing with finite state machine.
Used slightly modified doodle-library from last project. Click at one point
in the window, move the mouse, and then click another point to finish line.

statemachinetest-3.html

Interaction of double clicking a folder / icon's label to rename. New name (limited to 14 characters) is finalized when user clicks outside the icon or presses enter. StateMachine is "attached" to multiple elements by being attached to a div serving as a container. Events bubble up from inside the container to the StateMachine attached.

statemachinetest-4.html

CPU Activity monitor simulated by a probabilistic finite state machine. Governed by 
a timer ticking in the background.

statemachinetest-5.html

First attempt at using a timer. Models two steetlights. Operates on container.
